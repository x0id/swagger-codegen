-module({{packageName}}_logic_handler).

-export([is_authorized/3]).
-export([is_forbidden/3]).
-export([handle_request/4]).

-type context() :: #{binary() => any()}.

-callback is_authorized(OperationID :: {{packageName}}_api:operation_id(), ApiKey :: binary()) ->
    {true, Context :: context()} | {false, Error :: term()}.

-callback is_forbidden(OperationID :: {{packageName}}_api:operation_id(), Context :: context()) ->
    boolean().

-callback handle_request(OperationID :: {{packageName}}_api:operation_id(), Request :: any(), Context :: context()) -> {
    Status :: cowboy:http_status(),
    Headers :: cowboy:http_headers(),
    Body :: #{} | {raw, binary()}
}.

-spec is_authorized(
    Handler :: atom(),
    OperationID :: {{packageName}}_api:operation_id(),
    ApiKey :: binary()
) ->
    {true, Context :: context()} | {false, Error :: term()}.
is_authorized(Handler, OperationID, ApiKey) ->
    Handler:is_authorized(OperationID, ApiKey).

-spec is_forbidden(
    Handler :: atom(),
    OperationID :: {{packageName}}_api:operation_id(),
    Context :: context()
) ->
    boolean().
is_forbidden(Handler, OperationID, Context) ->
    Handler:is_forbidden(OperationID, Context).

-spec handle_request(
    Handler :: atom(),
    OperationID :: {{packageName}}_api:operation_id(),
    Request :: any(),
    Context :: context()
) -> {
    Status :: cowboy:http_status(),
    Headers :: cowboy:http_headers(),
    Body :: #{} | {raw, binary()}
}.
handle_request(Handler, OperationID, Req, Context) ->
    Handler:handle_request(OperationID, Req, Context).
