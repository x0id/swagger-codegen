-module({{packageName}}_server).

-export([child_spec/2]).

-spec child_spec( ID :: any(), #{
    ip                := inet:ip_address(),
    port              := inet:port_number(),
    acceptors         := pos_integer(),
    net_opts          => [term()],
    logic_handler     := module(),
    cowboy_extra_opts => map()
}) -> supervisor:child_spec().

child_spec(ID, #{
    ip            := IP,
    port          := Port,
    acceptors     := NumAcceptors,
    logic_handler := LogicHandler
} = Params) ->
    NetOpts = maps:get(net_opts, Params, []),
    {Trans, TransOpts} =
        get_socket_transport(IP, Port, NumAcceptors, NetOpts),
    ExtraOpts = maps:get(cowboy_extra_opts, Params, []),
    CowboyOpts = get_cowboy_config(LogicHandler, ExtraOpts),
    ranch:child_spec({?MODULE, ID},
        Trans, TransOpts, cowboy_clear, CowboyOpts).

get_socket_transport(IP, Port, NumAcceptors, Options) ->
    Opts = [
        {ip,   IP},
        {port, Port},
        {num_acceptors, NumAcceptors}
    ],
    case {{packageName}}_utils:get_opt(ssl, Options) of
        SslOpts = [_|_] ->
            {ranch_ssl, Opts ++ SslOpts};
        undefined ->
            {ranch_tcp, Opts}
    end.

get_cowboy_config(LogicHandler, ExtraOpts) ->
    get_cowboy_config(LogicHandler,
        maps:to_list(ExtraOpts),
        get_default_opts(LogicHandler)).

get_cowboy_config(_LogicHandler, [], Opts) ->
    Opts;

get_cowboy_config(LogicHandler, [{env, Env} | Rest], Opts) ->
    NewEnv = case maps:get(dispatch, Env, undefined) of
        undefined -> Env#{dispatch => get_default_dispatch(LogicHandler)};
        _ -> Env
    end,
    get_cowboy_config(LogicHandler, Rest, store_key(env, NewEnv, Opts));

get_cowboy_config(LogicHandler, [{Key, Value}| Rest], Opts) ->
    get_cowboy_config(LogicHandler, Rest, store_key(Key, Value, Opts)).

get_default_dispatch(LogicHandler) ->
    Paths = {{packageName}}_router:get_paths(LogicHandler),
    cowboy_router:compile(Paths).

get_default_opts(LogicHandler) ->
    #{env => #{dispatch => get_default_dispatch(LogicHandler)}}.

store_key(Key, Value, Opts) ->
    Opts#{Key => Value}.
